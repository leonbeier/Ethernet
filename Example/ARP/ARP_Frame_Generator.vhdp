/*
    Name: UDP Frame Generator
    Rev: 1.0
    Creator: Leon Beier
    Date: 11.09.2022
    Copyright (c) 2022 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

    Description: -This component creates an Ethernet frame with IP and UDP
                 -The PHY_... I/Os are connected with e.g. the lan8720a library
               
    Usage:       -Connect CLK with the 50MHz clock of the PHY:
                 NewComponent UDP_Frame_Generator (
                    CLK => lan8720a_eth_retclk_i,
                 ...
                 -Set all paramters according to your application
                 -Set TX_Length to the number of UDP bytes to send and set TX_Start to '1'
                 -Always set TX_Data to the byte on TX_Read_Byte position
                 -Set TX_Start to '0' before TX_Read_Byte is equal to TX_Length
                 
    Example:     SIGNAL UDP_Data_RAM    : UDP_Data_RAM_t(0 to 4) := (x"01", x"02", x"03", x"04", x"05");
                 SIGNAL UDP_Data_Length : NATURAL range 0 to 1472 := 5;
                 
                 Process()
                 {
                     Thread
                     {
                         lan8720a_rst_i <= '1';
                         Wait(30ms);
                         lan8720a_rst_i <= '0';
                         Wait(30ms);
                         While(true)
                         {
                             NewFunction UDP_Send (UDP_Data_Length, UDP_Data_RAM, UDP_TX_Start, UDP_TX_Length, UDP_TX_Data, UDP_TX_Read_Byte);
                             Wait(1000ms);
                         }
                     }
                 }
    
 */

Component ARP_Frame_Generator
(
    Include
    (
        UDP_Data_RAM_Package.all,
    );
    Package UDP_Data_RAM_Package
    (
        type UDP_Data_RAM_t is array (natural range <>) of STD_LOGIC_VECTOR(7 downto 0);
    );
    Generic
    (
        --Ethernet
        Source_MAC_Address : STD_LOGIC_VECTOR(6*8-1 downto 0) := x"123456781234";
        EtherType          : STD_LOGIC_VECTOR(2*8-1 downto 0) := x"0800"; --0x0800 is IPv4
        
        HTYPE              : STD_LOGIC_VECTOR(2*8-1 downto 0) := x"0001"; --1 = Ethernet
        HLEN               : STD_LOGIC_VECTOR(8-1 downto 0) := x"06";     --Bytes of MAC Address
        PLEN               : STD_LOGIC_VECTOR(8-1 downto 0) := x"04";     --Bytes of IP Address
    );
    --Ethernet
    Destination_MAC_Address : IN STD_LOGIC_VECTOR(6*8-1 downto 0) := x"FFFFFFFFFFFF";
    
    --ARP
    Operation               : IN STD_LOGIC_VECTOR(2*8-1 downto 0) := x"0001"; --1 = Request, 2 = Answer
    Source_IP_Address       : IN STD_LOGIC_VECTOR(4*8-1 downto 0) := x"C0A80005"; --192.168.0.5
    Destination_IP_Address  : IN STD_LOGIC_VECTOR(4*8-1 downto 0) := x"C0A80002"; --192.168.0.2
    
    ARP_Start               : IN STD_LOGIC := '0';
    ARP_Busy                : OUT STD_LOGIC := '0';
    
    --PHY Interface
    PHY_Empty               : OUT STD_LOGIC := '1';
    PHY_Read_Enable         : IN  STD_LOGIC;
    PHY_Data                : OUT STD_LOGIC_VECTOR(7 downto 0);
    PHY_EOF                 : OUT STD_LOGIC := '0';
)
{
    
    Process()
    {
        If(falling_edge(CLK))
        {
            VARIABLE Dest_MAC : STD_LOGIC_VECTOR(6*8-1 downto 0) := x"000000000000";
            
            VARIABLE Running         : BOOLEAN := false;
            VARIABLE Start           : BOOLEAN := false;
            VARIABLE Frame_Element   : NATURAL range 0 to 12 := 0;
            VARIABLE Frame_Data      : STD_LOGIC_VECTOR(31 downto 0);
            VARIABLE Byte_Cnt        : NATURAL range 0 to 3 := 0;
            If(Running)
            {
                If(Operation = x"0001")
                {
                    Dest_MAC := x"000000000000";
                }
                Else
                {
                    Dest_MAC := Destination_MAC_Address;
                }
                
                Case(Frame_Element)
                {
                    When(0) --Destination MAC 5-2
                    {
                        Frame_Data := Destination_MAC_Address(6*8-1 downto 2*8);
                    }
                    When(1) --Destination MAC 1-0, Source MAC 5-4
                    {
                        Frame_Data := Destination_MAC_Address(2*8-1 downto 0) & Source_MAC_Address(6*8-1 downto 4*8);
                    }
                    When(2) --Source MAC 3-0
                    {
                        Frame_Data := Source_MAC_Address(4*8-1 downto 0);
                    }
                    When(3) --EtherType 1-0
                    {
                        Frame_Data(31 downto 16) := EtherType;
                    }
                    When(4) --HTYPE, PTYPE
                    {
                        Frame_Data := HTYPE & EtherType;
                    }
                    When(5) --HLEN, PLEN, OPER
                    {
                        Frame_Data := HLEN & PLEN & Operation;
                    }
                    When(6) --Source MAC 5-2
                    {
                        Frame_Data := Source_MAC_Address(6*8-1 downto 2*8);
                    }
                    When(7) --Source MAC 1-0, Source IP 3-2
                    {
                        Frame_Data := Source_MAC_Address(2*8-1 downto 0) & Source_IP_Address(4*8-1 downto 2*8);
                    }
                    When(8) --Source IP 1-0, Destination MAC 5-4
                    {
                        Frame_Data := Source_IP_Address(2*8-1 downto 0) & Dest_MAC(6*8-1 downto 4*8);
                    }
                    When(9) --Destination MAC 3-0
                    {
                        Frame_Data := Dest_MAC(4*8-1 downto 0);
                    }
                    When(10) --Destination IP
                    {
                        Frame_Data := Destination_IP_Address;
                    }
                    When(others)
                    {
                        null;
                    }
                }
                
                If(PHY_Read_Enable = '1' or Start)
                {
                    Start := false;
                    PHY_Data <= Frame_Data((Byte_Cnt+1)*8-1 downto Byte_Cnt*8);
                    If((Byte_Cnt > 0 AND Frame_Element /= 3) OR Byte_Cnt > 2)
                    {
                        Byte_Cnt := Byte_Cnt - 1;
                    }
                    Else
                    {
                        Byte_Cnt := 3;
                        Frame_Element := Frame_Element + 1;
                    }
                    
                    
                    if(Frame_Element = 11 AND Byte_Cnt < 3)
                    {
                        PHY_Data  <= (others => '0');
                        PHY_Empty <= '1';
                        PHY_EOF   <= '0';
                        ARP_Busy  <= '0';
                        Frame_Element := 0;
                        Running   := false;
                    }
                    ElsIf(Frame_Element = 11 AND Byte_Cnt = 3)
                    {
                        PHY_EOF <= '1';
                    }
                }
            }
            Else
            {
                If(ARP_Start = '1')
                {
                    PHY_Empty <= '0';
                    ARP_Busy  <= '1';
                    Running := true;
                    Start   := true;
                    Byte_Cnt := 3;
                }
            }
        }
    }
}